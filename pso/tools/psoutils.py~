import os
import json

from operator import itemgetter
import operator

from pso.tools import utils      
from pso.tools import operations 

def vasp_energy(command, subfolder_list, x_t, v_t, num_cores=1, output_name="pop_res.json",
                name_input="input_files"):
    """ Function to perform VASP calculations and obtain the energies.

        Parameters:
        ============
        
        command: class.str
          Command to submit VASP jobs.

        subfolder_list: class.list
          List containing all the folders where VASP jobs will be submitted.

        x_t: class.list
          List containing PSO coordinates.

        v_t: class.list
          List containing PSO velocities.

        num_cores: class.int
          Number of cores used for a VASP calculation.

        output_name: class.str (optional)
          Name of the JSON file used to store the PSO results.

        name_input: class.str (optional)
          Name of the folder containing the VASP files to perform a calculation.

        Returns:
        =========

        d: class.dict
          Dictionary containing the information of the state of each PSO-particle.

    """
    
    keys=[]; eng=[]

    parent=os.path.dirname(os.getcwd())
    vasp_files=os.path.join(parent, name_input)

    for idx, values in enumerate(subfolder_list):
        copy_files_vasp(vasp_files, values)
        eng.append(program_executor(command, int(num_cores), values)[-1])

        #Name of the keys based on generation 
        keys.append('_'.join(map(lambda x: x, values.split(os.sep)[-2:])))
        

    #Path to store the dictionary gen_1
    head_tail=os.path.split(subfolder_list[0])
    fullname=os.path.join(head_tail[0],output_name)

    d=dict(zip(keys,zip(eng,zip(x_t,v_t))))

    #printing the unorganized dictionary
    print_dic_gen(d, fullname)
    
    return d


def select_individuals(pop_info, acc_pop):
    """ Function to select all members up to acc_pop number.
        Since the dictionary is reversely ordered, the first
        element is the one with the lowest energy.
        
    """
               
    ord_confs=ord_dict(pop_info)
    
    return ord_confs, [True if x < acc_pop else False
                       for x in range(len(ord_confs))]

def get_gbest_pos(gbest, parent_dir):
    """Function to search and obtain the gbest set of parameters
       by transversing all generated gen_i folders. 
    """

    all_gbst=[i for i, e in enumerate(gbest) if e !=0]
    gbest_location=[]
    
    for idx, values in enumerate(all_gbst):
        ini_gen=os.path.join(parent_dir, "_".join(gbest[values].split('_')[0:2]))
        fullname=os.path.join(ini_gen,"pop_res.json")
        
        with open(fullname, "r") as f:
              pop_info = json.load(f)
        
        gbest_location.append((values,pop_info[str(gbest[values])]))

        
    if len(gbest_location) == 1:
        return gbest[0], gbest_location[0][1][1]

    else:
      ene_val= sorted([(i,gbest_location[i][1][0])
                       for i, val in enumerate(gbest_location)],
                       key=lambda x: x[1],
                       reverse=True)[0]

      folder, val=ene_val

      return gbest[folder], gbest_location[folder][1][1]

def get_prev_gen(gen_dir, acc_pop, gen_count):
    """Function to collect the json file from the previous generation folder 
       where the history of the process is collected.
    """

    if gen_count == 2:
       prev_gen="_".join([os.path.split(gen_dir)[1].split('_')[0], str(gen_count-1)])
       all_folder=os.path.split(gen_dir)[0]
       new_gen=os.path.join(all_folder, prev_gen)
       fullname=os.path.join(new_gen,"pop_res.json")
       
       with open(fullname, "r") as f:
           pop_info = json.load(f)

       return select_individuals(pop_info, acc_pop)
    
    else:
       prev_gen="_".join([os.path.split(gen_dir)[1].split('_')[0], str(gen_count-1)])
       all_folder=os.path.split(gen_dir)[0]
       new_gen_new=os.path.join(all_folder, prev_gen)
       new_fullname=os.path.join(new_gen_new,"pop_res.json")

       with open(new_fullname, "r") as f:
           pop_info_new = json.load(f)

       return select_individuals(pop_info_new, acc_pop)

def vel_global(gbest, key, gen_count):
    """Function to compute the global velocity of 
       PSO updating scheme.
    """

    pos_best, vel_best=gbest
    
    pop_info=open_json_file(key)
    pos_pre, vel_pre=pop_info[str(key)][1]

    #This is (gbest(i,j) - x(i,j))

    return list(map(operator.sub, pos_best, pos_pre))

def vel_local(key, gen_count):
    """Function to compute the global velocity of 
       PSO updating scheme.
    """

    pop_info_old=open_json_file(key)
    pos_pre, vel_pre=pop_info_old[str(key)][1]
    
    if gen_count == 2:
       pop_info=open_json_file(key)
       pos_pbest, vel_pbest=pop_info[str(key)][1]

       print ("The pbest is computed for {}".format(key))
       
       return list(map(operator.sub, pos_pbest, pos_pre))
  
    else:
       confs="_".join(key.split('_')[2:])
       gens=["gen_{}".format(i) for i in range(1,gen_count)]
       pbest_hist=["_".join([i,confs]) for i in gens]

       # Sorting the history via total energy
       dict_hist=sorted([open_json_file(paths)[str(paths)]
                         for ix, paths in enumerate(pbest_hist)],
                        key=lambda l: l[0], reverse=True)

       print ("The pbest is computed for {}".format(key))

       pos_pbest_new, vel_pbest_new = dict_hist[0][1]

       return list(map(operator.sub, pos_pbest_new, pos_pre))
    
    
def pso_update(gbest, key, gen_count, omega,  c1, c2, r1, r2):
    """Function to compute the full update of positions 
       and velocities of the PSO scheme. The propagation
       is given by:
 
       v_{i,j}(t+1) = omega*v_{i,j}(t)+velo_global_{i,j}(t)+velo_local{i,j}(t)

       x_{i,j}(t+1) = x{i,j}(t) + v_{i,j}(t+1)

       Parameters
       ===========

       gbest: class.list
         List containing the best structure found in the swarm. 

       key: class.
         Key value used in the dictionary to obtain the previous 
         PSO-positions and PSO-velocities. 

       gen_count: class.int
         Number siganiling the current generation in the propagation scheme.

       omega: class.float
         Inertia coefficient for the PSO propagation scheme.

       c1: class.float
         Coefficient c1 for the PSO propagation scheme.

       c2: class.float
         Coefficient c2 for the PSO propagation scheme. 

       r1: class.float
         Random number r1 for the PSO propagation scheme.

       r2: class.float
         Random number r1 for the PSO propagation scheme.

       Returns:
       ========

       pos_update, vel_update: class.list
         Separated lists containing coordinates and velocities propagated using the
         PSO scheme.
    """

    # Obtaining JSON file values
    prev_pop_info=open_json_file(key)
    pos_prev,vel_prev=prev_pop_info[str(key)][1]
    
    #Returns the inertia velocity term
    inertia_vel=[omega*float(i) for i in vel_prev]

    #Returns the gbest-x value
    velo_global=[c2*r2*float(i) for i in vel_global(gbest, key, gen_count)]

    #Returns the pbest-x value 
    velo_loc=[c1*r1*float(i) for i in vel_local(key, gen_count)]
    
    #Returns vel_update v_{i,j}(t+1)
    tmp_vel=list(map(operator.add, inertia_vel, velo_global))
    vel_update=list(map(operator.add, tmp_vel, velo_loc))

    #Returns ops_update x_{i,j}(t+1)
    pos_update=list(map(operator.add, pos_prev, vel_update))
    
    return pos_update, vel_update


def last_comparison_gbest(parent_dir, list_compare):
    """ Function to compare the whole history of computed
        gbest values in the swarm.

        Parameters:
        ============
 
        parent_dir: class.str
          Path to the parent directory.

        list_compare: class.list
          List with all the energy values produced by the swarm.

        Returns:
        =========

        None:
           Print the best found structure in the whole PSO propagation.
    """
    
    full_hist=[]
    for idx, values in enumerate(list_compare):
        full_last_path=os.path.join(parent_dir, "_".join(values.split("_")[0:2]))
        fullname=os.path.join(full_last_path,"pop_res.json")
    
        with open(fullname, "r") as f:
            full_hist.append((values, json.load(f)[str(values)]))

    if float(full_hist[0][1][0]) < float(full_hist[1][1][0]):
       print ("================================================================")
       print ("Best structure found in the swarm: {}".format(full_hist[0][0]))
       print ("================================================================")
       
    else:
       print ("================================================================")
       print ("Best structure found in the swarm: {}".format(full_hist[1][0]))
       print ("================================================================")
